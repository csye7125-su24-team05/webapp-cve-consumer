package db

import (
	"fmt"
	"log"
	"os"

	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/helper"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/models"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type DB interface {
	Close()
	InsertCVE(cve_data *models.CVE) error
	Ping() error
}

type db struct {
	conn *gorm.DB
}

func createConnection() (db *gorm.DB) {
	dbHost := helper.GetEnvWithDefault("DB_HOST", "localhost")
	dbUser := helper.GetEnv("DB_USER")
	dbPassword := helper.GetEnv("DB_PASSWORD")
	dbName := helper.GetEnv("DB_NAME")
	dbPort := helper.GetEnvWithDefault("DB_PORT", "5432")
	expoTimer := helper.NewExpoTimer(60)

	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=UTC", dbHost, dbUser, dbPassword, dbName, dbPort)

	var err error
	for {
		db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
		if err != nil {
			fmt.Printf("error connecting to database: %v", err.Error())
			expoTimer.Sleep()
			continue
		}
		return
	}
}

func NewDB() DB {
	return &db{
		createConnection(),
	}
}

func (db *db) Close() {
	sqlDB, err := db.conn.DB()
	if err != nil {
		log.Fatalf("error getting database connection: %v", err.Error())
		os.Exit(1)
	}
	sqlDB.Close()
}

func (db *db) Ping() error {
	sqlDB, err := db.conn.DB()
	if err != nil {
		return err
	}
	return sqlDB.Ping()
}