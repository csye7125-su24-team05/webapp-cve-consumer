package kafka

import (
	"context"
	"log"
	"strings"

	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/helper"
	"github.com/segmentio/kafka-go"
	"github.com/segmentio/kafka-go/sasl/plain"
)

type Kafka interface {
	FetchMessage() (kafka.Message, error)
	CommitMessages(messages ...kafka.Message) error
	Close()
}

type kafkaReader struct {
	Dialer *kafka.Dialer
	Reader *kafka.Reader
	ctx context.Context
}

func NewKafka() Kafka {
	topic := helper.GetEnv("KAFKA_TOPIC", "")
	groupID := helper.GetEnv("KAFKA_GROUP_ID", "")
	broker := helper.GetEnv("KAFKA_BROKER", "")
	mechanism := plain.Mechanism{
		Username: helper.GetEnv("KAFKA_USERNAME", ""),
		Password: helper.GetEnv("KAFKA_PASSWORD", ""),
	}

	dialer := &kafka.Dialer{
		SASLMechanism: mechanism,
	}
	log.Println("Kafka ", broker, topic, groupID)
	kafkaReader := &kafkaReader{
		Dialer: dialer,
		Reader: kafka.NewReader(kafka.ReaderConfig{
			Brokers: strings.Split(broker, ";"),
			Topic:   topic,
			GroupID: groupID,
			Dialer:  dialer,
		}),
		ctx: context.Background(),
	}

	return kafkaReader
}

func (k *kafkaReader) Close() {
	if err := k.Reader.Close(); err != nil {
		log.Fatalf("error closing kafka reader: %v", err.Error())
	}
}

func (k *kafkaReader) FetchMessage() (kafka.Message, error) {
	message, err := k.Reader.FetchMessage(k.ctx)
	if err != nil {
		log.Printf("error fetching message from kafka: %v", err.Error())
		return kafka.Message{}, err
	}
	return message, nil
}

func (k *kafkaReader) CommitMessages(messages ...kafka.Message) error {
	err := k.Reader.CommitMessages(k.ctx, messages...)
	if err != nil {
		log.Printf("error committing messages to kafka: %v", err.Error())
		return err
	}
	return nil
}
