package main

import (
	"encoding/json"
	"log"
	"os"
	"syscall"

	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/db"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/helper"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/kafka"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/models"
)

func main() {
	for {
		db := db.NewDB()
		kafka := kafka.NewKafka()
		signal := helper.NewOSSignal()
		errSig := helper.NewErrorSig()
		signal.Notify(os.Interrupt, syscall.SIGTERM, syscall.SIGINT)
		go processMessages(db, kafka, errSig)
		select {
			case err := <-errSig.Channel():
				kafka.Close()
				db.Close()
				log.Fatalf("error received: %v", err.Error())
			case <-signal.Channel():
				kafka.Close()
				db.Close()
				log.Printf("received interrupt signal, closing connections")
		}
	}
}


func processMessages(db db.DB, kafka kafka.Kafka, errSig helper.ErrorSig) {
	for {
		err := kafka.CheckConnection()
		if err != nil {
			break
		}
		message, err := kafka.FetchMessage()
		if err != nil {
			continue
		}
		cve_record := models.CVE{}
		err = json.Unmarshal(message.Value, &cve_record)
		if err != nil {
			log.Printf("error unmarshalling message: %v", err.Error())
			kafka.CommitMessages(message)
			continue
		}
		err = db.Ping()
		if err != nil {
			break
		}
		log.Printf("inserting record: %v", cve_record.CveID)
		err = db.InsertCVE(&cve_record)
		if err != nil {
			log.Printf("error inserting record: %v", err.Error())
			continue
		}
		err = kafka.CommitMessages(message)
		if err != nil {
			log.Printf("error committing message: %v", err.Error())
			continue
		}
	}
}