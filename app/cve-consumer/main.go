package main

import (
	"encoding/json"
	"os"
	"syscall"

	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/db"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/helper"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/kafka"
	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/models"
	"github.com/rs/zerolog/log"
)

func main() {
	helper.SetupLogger()
	
	log.Info().Msg("Starting consumer...")
	db := db.NewDB()
	kafka := kafka.NewKafka()
	signal := helper.NewOSSignal()
	signal.Notify(os.Interrupt, syscall.SIGTERM, syscall.SIGINT)
	go processMessages(db, kafka)
	<-signal.Channel()
	log.Info().Msg("Shutting down consumer...")
}


func processMessages(db db.DB, k kafka.Kafka) {
	defer db.Close()
	defer k.Close()
	for {
		message, err := k.FetchMessage()
		if err != nil {
			log.Error().Err(err).Msg("error fetching message")
			if err == syscall.EPIPE {
				log.Info().Msg("reconnecting to kafka...")
				k.Close()
				k = kafka.NewKafka()
			}
		}
		cve_record := models.CVE{}
		err = json.Unmarshal(message.Value, &cve_record)
		if err != nil {
			log.Error().Err(err).Msg("error unmarshalling message")
			k.CommitMessages(message)
			continue
		}
		err = db.Ping()
		if err != nil {
			log.Error().Err(err).Msg("error pinging database")
			continue
		}
		log.Info().Msgf("inserting record: %v", cve_record)
		err = db.InsertCVE(&cve_record)
		if err != nil {
			log.Error().Err(err).Msg("error inserting record")
			continue
		}
		err = k.CommitMessages(message)
		if err != nil {
			log.Error().Err(err).Msg("error committing message")
			continue
		}
	}
}