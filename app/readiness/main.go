package main

import (
	"context"
	"os"
	"strings"

	"github.com/csye7125-su24-team05/webapp-cve-consumer/internal/helper"
	"github.com/rs/zerolog/log"
	"github.com/segmentio/kafka-go"
	"github.com/segmentio/kafka-go/sasl/plain"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func main() {
	CheckDBConection()
	CheckKafka()
}

func CheckDBConection() {
	helper.SetupLogger()
	dbHost := helper.GetEnv("DB_HOST", "localhost")
	dbUser := helper.GetEnv("DB_USER", "")
	dbPassword := helper.GetEnv("DB_PASSWORD", "")
	dbName := helper.GetEnv("DB_NAME", "")
	dbPort := helper.GetEnv("DB_PORT", "5432")
	dsn := "host=" + dbHost + " user=" + dbUser + " password=" + dbPassword + " dbname=" + dbName + " port=" + dbPort + " sslmode=disable TimeZone=UTC"
	conn, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Error().Err(err).Msg("error connecting to database")
		os.Exit(255)
	}
	db, err := conn.DB()
	if err != nil {
		log.Error().Err(err).Msg("error getting database connection")
		os.Exit(1)
	}
	defer db.Close()
	err = conn.Exec("SELECT 1").Error
	if err != nil {
		log.Error().Err(err).Msg("error pinging database")
		os.Exit(1)
	} 
	log.Info().Msg("Database connection successful")
}

func CheckKafka() {
	topic := helper.GetEnv("KAFKA_TOPIC", "")
	brokers := strings.Split(helper.GetEnv("KAFKA_BROKER", ""), ";")
	mechanism := plain.Mechanism{
		Username: helper.GetEnv("KAFKA_USERNAME", ""),
		Password: helper.GetEnv("KAFKA_PASSWORD", ""),
	}

	dialer := &kafka.Dialer{
		SASLMechanism: mechanism,
	}

	ctx := context.Background()
	for _, broker := range brokers {
		conn, err := dialer.DialContext(ctx, "tcp", broker)
		if err != nil {
			log.Error().Err(err).Msgf("error connecting to kafka broker: %s", broker)
			os.Exit(255)
		}
		conn.Close()
	}

	conn, _ := dialer.DialContext(ctx, "tcp", brokers[0])
	defer conn.Close()
	partitions, err := conn.ReadPartitions()
	if err != nil {
		log.Error().Err(err).Msg("error reading partitions")
		os.Exit(1)
	}
	for _, partition := range partitions {
		if partition.Topic == topic {
			log.Info().Msgf("topic %v exists in Kafka brokers", topic)
			return
		}
	}

	log.Error().Msgf("topic %v does not exist in any of the Kafka brokers", topic)
}